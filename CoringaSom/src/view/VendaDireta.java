/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.ControleProduto;
import control.ControleVendas;
import control.MetodosPadrao;
import dao.Conecta_Banco;
import dao.Conecta_Tabela;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import model.ModeloProduto;
import model.ModeloVenda;
import relatorios.ImpressaoVenda;

/**
 *
 * @author Murilo Santos
 */
public class VendaDireta extends javax.swing.JInternalFrame {

    /**
     * Creates new form EntradaEstoque
     */
    
    String usuario ="";
    
    public void passaDados(String user)
    {
        usuario = user;
    }
    public VendaDireta() {
        initComponents();
        preencherTabela("SELECT PRD.CD_BARRAS, PRD.NM_PRODUTO, PRD.ID, PRD.DS_QUANTIDADE,\n" +
        "PRD.VL_COMPRA, PRD.VL_VENDA, FORN.NM_FORNECEDOR, TP.NM_TIPO, EST.ESTOQUE FROM PRODUTOS AS PRD\n" +
        "JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP\n" +
        "ON TP.ID = PRD.ID_TIPO JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID WHERE EST.ESTOQUE >0"
        +" AND PRD.DS_STATUS !='I';");
        
    }

    MetodosPadrao metodo = new MetodosPadrao();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldNomeProduto = new javax.swing.JTextField();
        jButtonPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProdutos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jTextFieldEstoqueAtual = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldEstoqueRecomendado = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldFornecedor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldValorVenda = new javax.swing.JTextField();
        jTextFieldSituacaoEstoque = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldProduto = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldTipoProduto = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldCodigoBarras = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldQuantidadeVenda = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButtonCadastrar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCarrinho = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldQuantidadeValorFinalProduto = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldQuantidadeValorTotal = new javax.swing.JTextField();
        jButtonRemover = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldDesconto = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldValorFinal = new javax.swing.JTextField();
        jButtonFinalizarVenda = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        setClosable(true);
        setMaximizable(true);
        setTitle("Venda de Produtos Direta");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Coringa.png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(34, 34, 34));

        jLabel1.setFont(new java.awt.Font("Old English Text MT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Venda de Produtos");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/iconeCoringa.png"))); // NOI18N
        jLabel8.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGap(20, 20, 20))
        );

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Produto:");

        jTextFieldNomeProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldNomeProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeProdutoActionPerformed(evt);
            }
        });
        jTextFieldNomeProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeProdutoKeyPressed(evt);
            }
        });

        jButtonPesquisar.setBackground(new java.awt.Color(68, 68, 66));
        jButtonPesquisar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProdutos);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldEstoqueAtual.setEditable(false);
        jTextFieldEstoqueAtual.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Estoque Atual:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Estoque Recomendado:");

        jTextFieldEstoqueRecomendado.setEditable(false);
        jTextFieldEstoqueRecomendado.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Fornecedor:");

        jTextFieldFornecedor.setEditable(false);
        jTextFieldFornecedor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Valor de Venda:");

        jTextFieldValorVenda.setEditable(false);
        jTextFieldValorVenda.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldSituacaoEstoque.setEditable(false);
        jTextFieldSituacaoEstoque.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Situação do Estoque:");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("Dados Atuais:");

        jTextFieldProduto.setEditable(false);
        jTextFieldProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldProdutoKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("Produto:");

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Tipo do Produto:");

        jTextFieldTipoProduto.setEditable(false);
        jTextFieldTipoProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldProduto))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldEstoqueAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldEstoqueRecomendado, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldFornecedor)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldTipoProduto))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldValorVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldSituacaoEstoque)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel11)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jTextFieldTipoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jTextFieldProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldEstoqueAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEstoqueRecomendado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldValorVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldSituacaoEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Código de Barras:");

        jTextFieldCodigoBarras.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldCodigoBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCodigoBarrasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCodigoBarrasKeyReleased(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldQuantidadeVenda.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldQuantidadeVenda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeVendaFocusLost(evt);
            }
        });
        jTextFieldQuantidadeVenda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeVendaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeVendaKeyReleased(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setText("Quantidade Venda:");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("Venda:");

        jButtonCadastrar.setBackground(new java.awt.Color(0, 168, 82));
        jButtonCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCadastrar.setText("Adicionar ao Carrinho");
        jButtonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCadastrarActionPerformed(evt);
            }
        });

        jTableCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableCarrinho);

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("Valor Final R$:");

        jTextFieldQuantidadeValorFinalProduto.setEditable(false);
        jTextFieldQuantidadeValorFinalProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldQuantidadeValorFinalProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeValorFinalProdutoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeValorFinalProdutoFocusLost(evt);
            }
        });
        jTextFieldQuantidadeValorFinalProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeValorFinalProdutoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeValorFinalProdutoKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Valor Total R$:");

        jTextFieldQuantidadeValorTotal.setEditable(false);
        jTextFieldQuantidadeValorTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldQuantidadeValorTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQuantidadeValorTotalFocusLost(evt);
            }
        });
        jTextFieldQuantidadeValorTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeValorTotalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldQuantidadeValorTotalKeyReleased(evt);
            }
        });

        jButtonRemover.setBackground(new java.awt.Color(156, 32, 36));
        jButtonRemover.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRemover.setText("Remover do Carrinho");
        jButtonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("Valor Desconto R$:");

        jTextFieldDesconto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldDesconto.setText("0");
        jTextFieldDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldDescontoFocusLost(evt);
            }
        });
        jTextFieldDesconto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDescontoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldDescontoKeyReleased(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setText("Valor Final R$:");

        jTextFieldValorFinal.setEditable(false);
        jTextFieldValorFinal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextFieldValorFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldValorFinalFocusLost(evt);
            }
        });
        jTextFieldValorFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldValorFinalKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldValorFinalKeyReleased(evt);
            }
        });

        jButtonFinalizarVenda.setBackground(new java.awt.Color(0, 168, 82));
        jButtonFinalizarVenda.setForeground(new java.awt.Color(255, 255, 255));
        jButtonFinalizarVenda.setText("Finalizar Venda");
        jButtonFinalizarVenda.setEnabled(false);
        jButtonFinalizarVenda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonFinalizarVendaFocusGained(evt);
            }
        });
        jButtonFinalizarVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonFinalizarVendaMouseEntered(evt);
            }
        });
        jButtonFinalizarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinalizarVendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel15)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuantidadeVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuantidadeValorFinalProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCadastrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonRemover))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuantidadeValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldValorFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFinalizarVenda)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextFieldQuantidadeVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jTextFieldQuantidadeValorFinalProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCadastrar)
                    .addComponent(jButtonRemover))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextFieldQuantidadeValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jTextFieldDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jTextFieldValorFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFinalizarVenda))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1014, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldCodigoBarras)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonPesquisar)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesquisar))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
       pesquisar();
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jTextFieldNomeProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeProdutoKeyPressed
        if(KeyEvent.VK_ENTER== evt.getKeyCode())
        {
            pesquisar();
        }
    }//GEN-LAST:event_jTextFieldNomeProdutoKeyPressed

    private void jTextFieldCodigoBarrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodigoBarrasKeyPressed
       if(KeyEvent.VK_ENTER== evt.getKeyCode())
        {
            pesquisar();
        }
    }//GEN-LAST:event_jTextFieldCodigoBarrasKeyPressed

    private void jTableProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProdutosMouseClicked
        MetodosPadrao metodo = new MetodosPadrao();
        metodo.desfocaCampo(jTextFieldProduto);
        String id= jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), 6)+"";
        String nome=jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), 1)+"";
        String tipo=jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), 5)+"";
        String fornecedor=jTableProdutos.getValueAt(jTableProdutos.getSelectedRow(), 4)+"";
        if(!id.equals(""))
        {
            pesquisarDadosProduto(id,nome,tipo,fornecedor);          
        }
    }//GEN-LAST:event_jTableProdutosMouseClicked

    private void jTextFieldQuantidadeVendaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeVendaKeyReleased
    try 
    {        
        String valor = jTextFieldValorVenda.getText();
        valor = valor.replace(",",".");
        
        int quantidade = Integer.parseInt(jTextFieldQuantidadeVenda.getText());
        float valorVenda = Float.parseFloat(valor);
        float calc = quantidade * valorVenda;
        
        String total = metodo.formataFloats(calc);
        
        jTextFieldQuantidadeValorFinalProduto.setText(total+"");
        
        int estoqueAtual = Integer.parseInt(jTextFieldEstoqueAtual.getText());
        
        if(quantidade >estoqueAtual)
        {
             JOptionPane.showMessageDialog(null,"Erro:\n"
                     + "Quantidade de produtos adicionada maior que o estoque atual","Erro:",JOptionPane.WARNING_MESSAGE);
             jTextFieldQuantidadeVenda.setText("");
        }
       
    } 
    catch (Exception e) {
        
        jTextFieldQuantidadeVenda.setText("");
    }
        
       
    }//GEN-LAST:event_jTextFieldQuantidadeVendaKeyReleased

    private void jTextFieldQuantidadeVendaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeVendaKeyPressed
       if(evt.getKeyCode() == KeyEvent.VK_ENTER)
       {
           adicionarAoCarinho();
       }
    }//GEN-LAST:event_jTextFieldQuantidadeVendaKeyPressed

    private void jTextFieldProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProdutoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProdutoKeyReleased

    private void jTextFieldQuantidadeVendaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeVendaFocusLost
       metodo.desfocaCampo(jTextFieldQuantidadeVenda);
    }//GEN-LAST:event_jTextFieldQuantidadeVendaFocusLost

    private void jTextFieldCodigoBarrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodigoBarrasKeyReleased
    if(!jTextFieldCodigoBarras.getText().isEmpty())
    {
        String codigo = jTextFieldCodigoBarras.getText();
        pesquisarDadosCodigo(codigo);
    }
       
    }//GEN-LAST:event_jTextFieldCodigoBarrasKeyReleased

    private void jButtonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCadastrarActionPerformed
        adicionarAoCarinho();
        
    }//GEN-LAST:event_jButtonCadastrarActionPerformed

    private void jTextFieldQuantidadeValorFinalProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorFinalProdutoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorFinalProdutoFocusLost

    private void jTextFieldQuantidadeValorFinalProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorFinalProdutoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorFinalProdutoKeyPressed

    private void jTextFieldQuantidadeValorFinalProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorFinalProdutoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorFinalProdutoKeyReleased

    private void jTextFieldQuantidadeValorTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorTotalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorTotalFocusLost

    private void jTextFieldQuantidadeValorTotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorTotalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorTotalKeyPressed

    private void jTextFieldQuantidadeValorTotalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorTotalKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantidadeValorTotalKeyReleased

    private void jTextFieldQuantidadeValorFinalProdutoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQuantidadeValorFinalProdutoFocusGained
      
           adicionarAoCarinho();
       
    }//GEN-LAST:event_jTextFieldQuantidadeValorFinalProdutoFocusGained

    private void jButtonFinalizarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinalizarVendaActionPerformed
     int linhas=jTableCarrinho.getRowCount();
        
     if(linhas!=0 && !jTextFieldDesconto.getText().isEmpty())
     {
         int totalVendas = metodo.buscaNumeroVenda();
         
         ModeloVenda modeloVenda = new ModeloVenda();
         modeloVenda.setNr_venda(totalVendas);
         
         
         //Mesmo dado pois a venda é direta
         modeloVenda.setId_usuario_aprovador(Integer.parseInt(usuario));
         modeloVenda.setId_usuario_venda(Integer.parseInt(usuario));
         modeloVenda.setStatus_venda("D");
         
         String valor="";
         for(int i=0; i<linhas; i++)
         {
            String produto=jTableCarrinho.getValueAt(i, 0)+"";
            String quantidade=jTableCarrinho.getValueAt(i, 1)+"";          
            String valorUnitario = jTableCarrinho.getValueAt(i, 2)+"";
           
            valorUnitario =  valorUnitario.replace(",",".");
            
            
            float total = Float.parseFloat(quantidade) * Float.parseFloat(valorUnitario);
            
            
            
            int idProduto = metodo.buscaIdProduto(produto);
            
            modeloVenda.setId_produto(idProduto);
            modeloVenda.setDs_quantidade(Integer.parseInt(quantidade));
            modeloVenda.setTotal(total);
           
            float desconto=0;
            
            if(i==0)
            {
                desconto = Float.parseFloat(jTextFieldDesconto.getText().replace(",","."));
            }
            modeloVenda.setDesconto(desconto);
            
            
            ControleVendas controleVendas = new ControleVendas();
            controleVendas.gravaVenda(modeloVenda);
            
            
            
            
            
            
            ModeloProduto modeloProduto = new ModeloProduto();
               
            String estoqueAtualLinha = jTableCarrinho.getValueAt(i, 4)+"";
            String estoqueFinallLinha = jTableCarrinho.getValueAt(i, 5)+"";
            
            int estqAtualFinal = Integer.parseInt(estoqueAtualLinha);
            int estqFinal = Integer.parseInt(estoqueFinallLinha);
            
            
            modeloProduto.setId(idProduto);
            modeloProduto.setDs_movimentacao("V");
            modeloProduto.setId_usuario(Integer.parseInt(usuario));
            modeloProduto.setId_responsavel(Integer.parseInt(usuario));
            modeloProduto.setEstoque_inicial(estqAtualFinal);
            modeloProduto.setEstoque_final(estqFinal);
            modeloProduto.setObservacao(null);
            
            ControleProduto controleProduto = new ControleProduto();
            controleProduto.gravaHistoricoProduto(modeloProduto);
            
           
            if(estqAtualFinal < estqFinal || estqFinal<=0 )
            {
                modeloProduto.setStatus_estoque("S");
            }
            else
            {
                modeloProduto.setStatus_estoque("N");            
            }
            
            
            
            
            String valorTotal = jTextFieldQuantidadeValorTotal.getText();
            valorTotal = valorTotal.replace(",",".");
            
            
             double valorFinal = Double.parseDouble(valorTotal);
             //System.out.println("VALOR DOUBLE: "+valorFinal);
             
             
             double valorTotalComDesconto = Double.parseDouble(jTextFieldValorFinal.getText().replace(",","."));
             
             valor = NumberFormat.getCurrencyInstance().format(valorTotalComDesconto);
             controleProduto.atualizaEstoqueProduto(modeloProduto);
            
         }    
          JOptionPane.showMessageDialog(null,"Venda Realizada com Sucesso!\n"
             + "Cobre "+valor+" do cliente!");
          
          
          int opc = JOptionPane.showConfirmDialog(null,"Deseja imprimir o comprovante da venda?");
          
          if(opc==JOptionPane.YES_OPTION)
          {
              ImpressaoVenda imp = new ImpressaoVenda();
              imp.imprimeVenda(modeloVenda.getNr_venda()+"");
          }
          
          
          limpaCampos();

     }
     else if(jTextFieldDesconto.getText().isEmpty())
     {
         JOptionPane.showMessageDialog(null,"Erro: Nenhum desconto adicioando para venda!");
         jTextFieldDesconto.setText("0");
     }
     else
     {
         JOptionPane.showMessageDialog(null,"Erro: Nenhum produto adicioando para venda!");
     }
     
        
    }//GEN-LAST:event_jButtonFinalizarVendaActionPerformed

    private void jButtonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverActionPerformed
        
      removerDoCarrinho();
    }//GEN-LAST:event_jButtonRemoverActionPerformed

    private void jTextFieldDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDescontoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescontoFocusLost

    private void jTextFieldDescontoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDescontoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescontoKeyPressed

    private void jTextFieldDescontoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDescontoKeyReleased
        calculaDesconto();
        
        
        
    }//GEN-LAST:event_jTextFieldDescontoKeyReleased

    private void jTextFieldValorFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldValorFinalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldValorFinalFocusLost

    private void jTextFieldValorFinalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldValorFinalKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldValorFinalKeyPressed

    private void jTextFieldValorFinalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldValorFinalKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldValorFinalKeyReleased

    private void jButtonFinalizarVendaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFinalizarVendaMouseEntered
        if(jTextFieldDesconto.getText().isEmpty())
        {
            jTextFieldDesconto.setText("0");
        }
    }//GEN-LAST:event_jButtonFinalizarVendaMouseEntered

    private void jButtonFinalizarVendaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonFinalizarVendaFocusGained
        if(jTextFieldDesconto.getText().isEmpty())
        {
            jTextFieldDesconto.setText("0");
        }
    }//GEN-LAST:event_jButtonFinalizarVendaFocusGained

    private void jTextFieldNomeProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeProdutoActionPerformed

    void calculaDesconto()
    {
        if(!jTextFieldDesconto.getText().equals("0") && !jTextFieldDesconto.getText().isEmpty())
        {
            try 
            {
                float desconto =Float.parseFloat(jTextFieldDesconto.getText().replace(",",".")); 


                float total = Float.parseFloat(jTextFieldQuantidadeValorTotal.getText().replace(",","."));



                float valorFinal = total - desconto;

                String valorFinalFormat = metodo.formataFloats(valorFinal);

                jTextFieldValorFinal.setText(valorFinalFormat);

            } 
            catch (Exception e) {

                jTextFieldDesconto.setText("0");
            }
        }
        else
        {
            String total = jTextFieldQuantidadeValorTotal.getText();
            
            jTextFieldValorFinal.setText(total);
        }
    }
    
    
    boolean validaValorSaida()
    {   
        System.out.println("to no método");
       try
       {
           System.out.println("Try");
            int i = Integer.parseInt(jTextFieldQuantidadeVenda.getText());
           if(jTextFieldQuantidadeVenda.getText().isEmpty())
           {
               return false;
           }
           else
           {
               
               System.out.println("I: "+i);
                if(i<=0)
                {
                    JOptionPane.showMessageDialog(null,"O valor informado é negativo ou nulo!","Erro:",JOptionPane.ERROR_MESSAGE);
                    metodo.validaCampo(jTextFieldQuantidadeVenda,"Estoque Saída");
                    return false;
                }
                else
                {
                    return true;
                } 
           }
                     
       }
       catch(Exception ex)
       {
           metodo.validaCampo(jTextFieldQuantidadeVenda, "Estoque Saída");
           JOptionPane.showMessageDialog(null,"O valor informado é inválido!","Erro:",JOptionPane.ERROR_MESSAGE);
           return false;
       }
        
    }
    
    
    
    void pesquisarDadosProduto(String id,String nome, String tipo,String fornecedor)
    {
         Conecta_Banco conecta = new Conecta_Banco();
            //BUSCO O ID DO CLIENTE PELO NOME
            try 
            {
                System.out.println("SELECT EST.ESTOQUE, PRD.DS_QUANTIDADE, PRD.VL_COMPRA, PRD.VL_VENDA\n" +
                " FROM PRODUTOS AS PRD JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID JOIN HISTORICO_ESTOQUE AS HS_ESTQ \n" +
                "ON HS_ESTQ.ID_PRODUTO = PRD.ID JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR WHERE PRD.ID ="+id+
                " AND PRD.DS_STATUS='A';");
                conecta.conexao();
                conecta.executaSQL("SELECT EST.ESTOQUE, PRD.DS_QUANTIDADE, PRD.VL_COMPRA, PRD.VL_VENDA\n" +
                " FROM PRODUTOS AS PRD JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID JOIN HISTORICO_ESTOQUE AS HS_ESTQ \n" +
                "ON HS_ESTQ.ID_PRODUTO = PRD.ID JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR WHERE PRD.ID ="+id+
                " AND PRD.DS_STATUS='A';");
                conecta.rs.last();

                 String valorVenda = metodo.formataFloats(conecta.rs.getFloat("VL_VENDA"));
                jTextFieldProduto.setText(nome);
                jTextFieldTipoProduto.setText(tipo);
                jTextFieldEstoqueAtual.setText(conecta.rs.getInt("ESTOQUE")+"");
                jTextFieldEstoqueRecomendado.setText(conecta.rs.getInt("DS_QUANTIDADE")+"");
                jTextFieldValorVenda.setText(valorVenda);
                
                jTextFieldFornecedor.setText(fornecedor);
                
                int estoqueAtual = Integer.parseInt(jTextFieldEstoqueAtual.getText());
                int estoqueRecomendado = Integer.parseInt(jTextFieldEstoqueRecomendado.getText());
                
                if(estoqueAtual == estoqueRecomendado)
                {                    
                    
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(0,168,82));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("NORMAL");
                }
                else if(estoqueAtual<=0)
                {
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(156,32,36));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("NEGATIVO");
                }
                else if(estoqueAtual<estoqueRecomendado)
                {
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(217,55,13));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("ABAIXO DO RECOMENDADO");
                }  
                
                else
                {
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(0,168,82));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("POSITIVO");
                }
                jTextFieldQuantidadeVenda.setText("");
                jTextFieldQuantidadeVenda.requestFocus();
                
                
            } 
            catch (SQLException ex) 
            {
                JOptionPane.showMessageDialog(null,"Erro ao Encontrar Id do Fornecedor: "
                +ex,"Erro:",JOptionPane.ERROR_MESSAGE);
                 
            }
    }
    
     void pesquisarDadosCodigo(String id)
    {
         Conecta_Banco conecta = new Conecta_Banco();
            //BUSCO O ID DO CLIENTE PELO NOME
            try 
            {

                //System.out.println(nome);
                conecta.conexao();
                conecta.executaSQL("SELECT PRD.NM_PRODUTO, FORN.NM_FORNECEDOR, EST.ESTOQUE, PRD.DS_QUANTIDADE, PRD.VL_COMPRA, PRD.VL_VENDA,\n" +
                "TP.NM_TIPO FROM PRODUTOS AS PRD JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID JOIN HISTORICO_ESTOQUE AS HS_ESTQ \n" +
                "ON HS_ESTQ.ID_PRODUTO = PRD.ID JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP ON TP.ID =\n" +
                "PRD.ID_TIPO WHERE PRD.CD_BARRAS ="+id+" AND PRD.DS_STATUS='A' AND EST.ESTOQUE >0;;");
                
                
                conecta.rs.last();
                jTextFieldNomeProduto.setText(conecta.rs.getString("NM_PRODUTO"));
                jTextFieldProduto.setText(conecta.rs.getString("NM_PRODUTO"));
                jTextFieldTipoProduto.setText(conecta.rs.getString("NM_TIPO"));
                jTextFieldEstoqueAtual.setText(conecta.rs.getInt("ESTOQUE")+"");
                jTextFieldEstoqueRecomendado.setText(conecta.rs.getInt("DS_QUANTIDADE")+"");
                jTextFieldValorVenda.setText(conecta.rs.getInt("VL_VENDA")+"");
              
                jTextFieldFornecedor.setText(conecta.rs.getString("NM_FORNECEDOR"));
                
                int estoqueAtual = Integer.parseInt(jTextFieldEstoqueAtual.getText());
                int estoqueRecomendado = Integer.parseInt(jTextFieldEstoqueRecomendado.getText());
                
                if(estoqueAtual == estoqueRecomendado)
                {                    
                    
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(0,168,82));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("NORMAL");
                }
                else if(estoqueAtual<estoqueRecomendado)
                {
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(156,32,36));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("NEGATIVO");
                }
                else
                {
                    jTextFieldSituacaoEstoque.setBackground(new java.awt.Color(0,168,82));
                    jTextFieldSituacaoEstoque.setForeground(Color.white);
                    jTextFieldSituacaoEstoque.setText("POSITIVO");
                }
                jTextFieldQuantidadeVenda.requestFocus();
                jTextFieldQuantidadeVenda.setText("");
            } 
            catch (SQLException ex) 
            {                
                 
            }
    }
    
    void pesquisar()
    {
        if(!jTextFieldCodigoBarras.getText().isEmpty())
       {
            preencherTabela("SELECT PRD.CD_BARRAS, PRD.NM_PRODUTO, PRD.ID, PRD.DS_QUANTIDADE,\n" +
            "PRD.VL_COMPRA, PRD.VL_VENDA, FORN.NM_FORNECEDOR, TP.NM_TIPO, EST.ESTOQUE FROM PRODUTOS AS PRD\n" +
            "JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP\n" +
            "ON TP.ID = PRD.ID_TIPO JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID WHERE EST.ESTOQUE >0 AND \n" +
            " PRD.DS_STATUS !='I' AND PRD.CD_BARRAS ="+jTextFieldCodigoBarras.getText());
            
       }
       else if(!jTextFieldNomeProduto.getText().isEmpty())
       {
            preencherTabela("SELECT PRD.CD_BARRAS, PRD.NM_PRODUTO, PRD.ID, PRD.DS_QUANTIDADE,\n" +
            "PRD.VL_COMPRA, PRD.VL_VENDA, FORN.NM_FORNECEDOR, TP.NM_TIPO, EST.ESTOQUE FROM PRODUTOS AS PRD\n" +
            "JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP\n" +
            "ON TP.ID = PRD.ID_TIPO JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID WHERE EST.ESTOQUE >0 AND\n" +
            " PRD.DS_STATUS !='I' AND PRD.NM_PRODUTO LIKE '%"+jTextFieldNomeProduto.getText()+"%';");
       }
       else
       {
           preencherTabela("SELECT PRD.CD_BARRAS, PRD.NM_PRODUTO, PRD.ID, PRD.DS_QUANTIDADE,\n" +
           "PRD.VL_COMPRA, PRD.VL_VENDA, FORN.NM_FORNECEDOR, TP.NM_TIPO, EST.ESTOQUE FROM PRODUTOS AS PRD\n" +
           "JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP\n" +
           "ON TP.ID = PRD.ID_TIPO JOIN ESTOQUE AS EST ON EST.ID_PRODUTO = PRD.ID WHERE EST.ESTOQUE >0 "
            + " AND PRD.DS_STATUS !='I';");
       }
    }
    
    void adicionarAoCarinho()
    {
        
        if(jTextFieldQuantidadeVenda.getText().isEmpty() || jTextFieldProduto.getText().isEmpty())
        {
            if(jTextFieldQuantidadeVenda.getText().isEmpty())
            {
                metodo.validaCampo(jTextFieldQuantidadeVenda, "Quantidade");
                jTextFieldQuantidadeVenda.requestFocus();
            }
            if(jTextFieldProduto.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(null,
                "Você precisa selecionar um produto antes!","Erro:",JOptionPane.ERROR_MESSAGE);
                jTextFieldCodigoBarras.requestFocus();
            }
        }
        else
        {
            int linhas= jTableCarrinho.getRowCount();
                    

            String[] colunas = new String[]{"PRODUTO","QUANTIDADE","VALOR UNITÁRIO","VALOR TOTAL","ESTOQUE INICIAL","ESTOQUE FINAL"};
            ArrayList dados = new ArrayList();

            int estoqueAtual = Integer.parseInt(jTextFieldEstoqueAtual.getText());
            int quantidadeVenda = Integer.parseInt(jTextFieldQuantidadeVenda.getText());
            
            int estoqueFinal = estoqueAtual -quantidadeVenda;
            
            
            
            if(linhas==0)            
            {
                dados.add(new Object[]{jTextFieldProduto.getText(),
                jTextFieldQuantidadeVenda.getText(),jTextFieldValorVenda.getText(),
                jTextFieldQuantidadeValorFinalProduto.getText(),estoqueAtual,estoqueFinal});
                 
                jTextFieldQuantidadeValorTotal.setText(jTextFieldQuantidadeValorFinalProduto.getText());
                 
               
                
                
                float valorFinal =  Float.parseFloat(jTextFieldQuantidadeValorFinalProduto.getText().replace(",","."));
                
                float valorDesconto = Float.parseFloat(jTextFieldDesconto.getText().replace(",","."));
                
                
                String valorFinalTotal = metodo.formataFloats(valorFinal);
                
                String valorSomaTotal = metodo.formataFloats(valorFinal);
                
                jTextFieldValorFinal.setText(valorSomaTotal);
                jTextFieldQuantidadeValorTotal.setText(valorSomaTotal);
                 
            }
            else
            {                                

                float somaTotal=0;

                for(int i=0; i<linhas;i++)
                {

                     String produto=jTableCarrinho.getValueAt(i, 0)+"";
                     String quantidade=jTableCarrinho.getValueAt(i, 1)+"";
                     String valorUnitario = jTableCarrinho.getValueAt(i, 2)+"";
                     String valorTotal = jTableCarrinho.getValueAt(i, 3)+"";
                     String estoqueAtualLinha = jTableCarrinho.getValueAt(i, 4)+"";
                     String estoqueFinallLinha = jTableCarrinho.getValueAt(i, 5)+"";
                     
                     dados.add(new Object[]{produto,quantidade,valorUnitario,valorTotal,estoqueAtualLinha,estoqueFinallLinha});

                     String valorTotalFinalFormat = jTextFieldQuantidadeValorTotal.getText();
                     String valorTotalProdutoFormat = jTextFieldQuantidadeValorFinalProduto.getText();
                     
                     valorTotalFinalFormat = valorTotalFinalFormat.replace(",",".");
                     valorTotalProdutoFormat = valorTotalProdutoFormat.replace(",",".");
                     
                     float valorTotalFinal = Float.parseFloat(valorTotalFinalFormat);
                     float valorTotalProduto = Float.parseFloat(valorTotalProdutoFormat);

                     
                     
                     somaTotal = valorTotalFinal + valorTotalProduto;
                }

                dados.add(new Object[]{jTextFieldProduto.getText(),
                jTextFieldQuantidadeVenda.getText(),jTextFieldValorVenda.getText(),
                jTextFieldQuantidadeValorFinalProduto.getText(),estoqueAtual,estoqueFinal});

                
                float valorDesconto = Float.parseFloat(jTextFieldDesconto.getText().replace(",","."));
                
                
                float valorFinal = somaTotal - valorDesconto;
                
                
                String valorFinalTotal = metodo.formataFloats(valorFinal);
                
                String valorSomaTotal = metodo.formataFloats(somaTotal);
                
                jTextFieldValorFinal.setText(valorSomaTotal);
                jTextFieldQuantidadeValorTotal.setText(valorSomaTotal);
                
                
            }

             

            Conecta_Tabela ct = new Conecta_Tabela(dados, colunas);
            jTableCarrinho.setModel(ct);

            jTableCarrinho.getColumnModel().getColumn(0).setPreferredWidth(200);
            jTableCarrinho.getColumnModel().getColumn(0).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(1).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(2).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(3).setResizable(true);

            
            //Deixando colunas invisíveis
            jTableCarrinho.getColumnModel().getColumn(4).setMinWidth(0);
            jTableCarrinho.getColumnModel().getColumn(4).setMaxWidth(0);
            
            jTableCarrinho.getColumnModel().getColumn(5).setMinWidth(0);
            jTableCarrinho.getColumnModel().getColumn(5).setMaxWidth(0);
            
            jTextFieldQuantidadeValorFinalProduto.setText("");
            jTextFieldSituacaoEstoque.setText("");
            jTextFieldValorVenda.setText("");
            jTextFieldEstoqueAtual.setText("");
            jTextFieldEstoqueRecomendado.setText("");
            jTextFieldFornecedor.setText("");
            jTextFieldTipoProduto.setText("");
            jTextFieldProduto.setText("");
            jTextFieldNomeProduto.setText("");
            jTextFieldCodigoBarras.setText("");
            jTextFieldCodigoBarras.requestFocus();
            jTextFieldQuantidadeVenda.setText("");
            jTextFieldSituacaoEstoque.setBackground(Color.white);
            jButtonFinalizarVenda.setEnabled(true);
            
            
           
        }
        
        calculaDesconto();
        
    }
    
    void removerDoCarrinho()
    {
        int linhaSelecionada = jTableCarrinho.getSelectedRow();
    
        if(linhaSelecionada <0)
        {
            JOptionPane.showMessageDialog(null,
            "Atenção, nenhum produto foi selecionado!","Erro:",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            int rows = jTableCarrinho.getRowCount();
            String produtos[] = new String[rows];
            String quantidade[] = new String[rows];
            String valorUnitario[] = new String[rows];
            String total[] = new String[rows];
            String estoqueAtualLinha [] = new String[rows];
            String estoqueFinallLinha [] = new String[rows];


            String[] colunas = new String[]{"PRODUTO","QUANTIDADE","VALOR UNITÁRIO","VALOR TOTAL","ESTOQUE ATUAL","ESTOQUE FINAL"};

            ArrayList dados = new ArrayList();

            System.out.println("LINHAS: "+linhaSelecionada);

            for(int r=0;r<rows;r++)
            {
                if(r==linhaSelecionada)
                {
                    total[r] = jTableCarrinho.getValueAt(r, 3).toString();
                    
                    
                    String valorProdutoFinal = total[r].replace(",",".");
                    String valorAtualFinal = jTextFieldQuantidadeValorTotal.getText().replace(",",".");
                    
                    float valorProduto = Float.parseFloat(valorProdutoFinal);
                    float valorAtual = Float.parseFloat(valorAtualFinal);

                    float valorFinal = valorAtual - valorProduto;

                    jTextFieldQuantidadeValorTotal.setText(valorFinal+"");

                    continue;
                }
                else
                {
                    produtos[r] = jTableCarrinho.getValueAt(r, 0).toString();
                    
                    quantidade[r] = jTableCarrinho.getValueAt(r, 1).toString();
                    valorUnitario[r] = jTableCarrinho.getValueAt(r, 2).toString();
                    total[r] = jTableCarrinho.getValueAt(r, 3).toString();
                    estoqueAtualLinha[r] = jTableCarrinho.getValueAt(r, 4).toString();
                    estoqueFinallLinha[r] = jTableCarrinho.getValueAt(r, 5).toString();

                    dados.add(new Object[]{produtos[r],quantidade[r],valorUnitario[r], 
                    total[r],estoqueAtualLinha[r],estoqueFinallLinha[r]});
                }       
            }

            Conecta_Tabela ct = new Conecta_Tabela(dados, colunas);
            jTableCarrinho.setModel(ct);

            jTableCarrinho.getColumnModel().getColumn(0).setPreferredWidth(200);
            jTableCarrinho.getColumnModel().getColumn(0).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(1).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(2).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableCarrinho.getColumnModel().getColumn(3).setResizable(true);

            jTableCarrinho.getColumnModel().getColumn(4).setMinWidth(0);
            jTableCarrinho.getColumnModel().getColumn(4).setMaxWidth(0);

            jTableCarrinho.getColumnModel().getColumn(5).setMinWidth(0);
            jTableCarrinho.getColumnModel().getColumn(5).setMaxWidth(0);
        }
        
         int linhas=jTableCarrinho.getRowCount();
         
         if(linhas<=0)
         {
             jButtonFinalizarVenda.setEnabled(false);
         }
         
         calculaDesconto();
    }
    void limpaCampos()
    {
        jTextFieldDesconto.setText("0");
        jTextFieldValorFinal.setText("");
        jTextFieldQuantidadeValorFinalProduto.setText("");
        jTextFieldSituacaoEstoque.setText("");
        jTextFieldValorVenda.setText("");
        jTextFieldEstoqueAtual.setText("");
        jTextFieldEstoqueRecomendado.setText("");
        jTextFieldFornecedor.setText("");
        jTextFieldTipoProduto.setText("");
        jTextFieldProduto.setText("");
        jTextFieldNomeProduto.setText("");
        jTextFieldCodigoBarras.setText("");
        jTextFieldCodigoBarras.requestFocus();
        jTextFieldQuantidadeVenda.setText("");
        jTextFieldSituacaoEstoque.setBackground(Color.white);
        jButtonFinalizarVenda.setEnabled(false);
        jTextFieldQuantidadeVenda.setText("");
        jTextFieldQuantidadeValorTotal.setText("");
        
         preencherTabela("SELECT PRD.CD_BARRAS, PRD.NM_PRODUTO, PRD.ID, PRD.DS_QUANTIDADE,\n" +
        "PRD.VL_COMPRA, PRD.VL_VENDA, FORN.NM_FORNECEDOR, TP.NM_TIPO FROM PRODUTOS AS PRD\n" +
        "JOIN FORNECEDORES AS FORN ON FORN.ID = PRD.ID_FORNECEDOR JOIN TIPO_PRODUTO AS TP\n" +
        "ON TP.ID = PRD.ID_TIPO JOIN ESTOQUE AS ESTQ ON ESTQ.ID_PRODUTO = PRD.ID WHERE ESTQ.ESTOQUE >0 AND PRD.DS_STATUS !='I';");
         
         String[] colunas = new String[]{};
         ArrayList dados = new ArrayList();

         Conecta_Tabela ct = new Conecta_Tabela(dados, colunas);
         jTableCarrinho.setModel(ct);
    }
    
    public void preencherTabela(String SQL) 
     {
         
        // System.out.println("SQL: "+SQL);
        //MUDANDO A FONTE DO CABEÇALHO
        JTableHeader cabecalho = jTableProdutos.getTableHeader();
        cabecalho.setFont(new java.awt.Font("Arial", 1, 12));

        
        
    
        
        ArrayList dados = new ArrayList();

        Conecta_Banco conecta = new Conecta_Banco();
        conecta.conexao();

        String[] colunas = new String[]{"COD BARRAS","NOME PRODUTO","QUANTIDADE MÍNIMA","VALOR DE VENDA",
        "FORNECEDOR","TIPO PRODUTO","ID"};

        conecta.executaSQL(SQL);
        try {
            conecta.rs.first();
            do {
                String valorVenda = metodo.formataFloats(conecta.rs.getFloat("VL_VENDA"));
                
               dados.add(new Object[]{conecta.rs.getString("CD_BARRAS"),
               conecta.rs.getString("NM_PRODUTO").toUpperCase(),conecta.rs.getString("DS_QUANTIDADE"),
               valorVenda,conecta.rs.getString("NM_FORNECEDOR").toUpperCase(),
               conecta.rs.getString("NM_TIPO").toUpperCase(),conecta.rs.getInt("ID")});

            } while (conecta.rs.next());
        } catch (SQLException ex) {
           
            JOptionPane.showMessageDialog(null,"Nenhum dado Encontrado!");
            System.out.println(ex);
             
        }
        
        jTableProdutos.getTableHeader().setReorderingAllowed(false);
        jTableProdutos.setAutoResizeMode(jTableProdutos.AUTO_RESIZE_OFF);
        jTableProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        JTableHeader header =  jTableProdutos.getTableHeader();
        DefaultTableCellRenderer centralizado = (DefaultTableCellRenderer) header.getDefaultRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER);

        Conecta_Tabela ct = new Conecta_Tabela(dados, colunas);
        jTableProdutos.setModel(ct);

        

        jTableProdutos.getColumnModel().getColumn(0).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(0).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTableProdutos.getColumnModel().getColumn(1).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(2).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(2).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(3).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(3).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(4).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(4).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(5).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(5).setResizable(true);
        
        jTableProdutos.getColumnModel().getColumn(6).setPreferredWidth(200);
        jTableProdutos.getColumnModel().getColumn(6).setResizable(true);
        
     
       
        //Ocultando a Coluna STATUS
        jTableProdutos.getColumnModel().getColumn(6).setMinWidth(0);
        jTableProdutos.getColumnModel().getColumn(6).setMaxWidth(0);
       
        jTableProdutos.getTableHeader().setReorderingAllowed(false);
        jTableProdutos.setAutoResizeMode(jTableProdutos.AUTO_RESIZE_OFF);
        jTableProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCadastrar;
    private javax.swing.JButton jButtonFinalizarVenda;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonRemover;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableCarrinho;
    private javax.swing.JTable jTableProdutos;
    private javax.swing.JTextField jTextFieldCodigoBarras;
    private javax.swing.JTextField jTextFieldDesconto;
    private javax.swing.JTextField jTextFieldEstoqueAtual;
    private javax.swing.JTextField jTextFieldEstoqueRecomendado;
    private javax.swing.JTextField jTextFieldFornecedor;
    private javax.swing.JTextField jTextFieldNomeProduto;
    private javax.swing.JTextField jTextFieldProduto;
    private javax.swing.JTextField jTextFieldQuantidadeValorFinalProduto;
    private javax.swing.JTextField jTextFieldQuantidadeValorTotal;
    private javax.swing.JTextField jTextFieldQuantidadeVenda;
    private javax.swing.JTextField jTextFieldSituacaoEstoque;
    private javax.swing.JTextField jTextFieldTipoProduto;
    private javax.swing.JTextField jTextFieldValorFinal;
    private javax.swing.JTextField jTextFieldValorVenda;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
